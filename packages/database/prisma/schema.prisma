// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "prisma/seed.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===================== //
// ===================== //
// TENANT TABLES
// ===================== //
// ===================== //
//
// Tenant, User...
//

model Tenant {
  id           String    @id @default(cuid())
  name         String
  address      String?
  country      String?
  website      String?
  email        String?
  contactTypes String[]
  dealStatuses String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  clubs        Club[]
  contacts     Contact[]
  deals        Deal[]
  users        User[]
  // ownedBy   Account? @relation(fields: [ownedById], references: [id])
  // ownedById String?
}

// No email here because we use Supabase Auth (auth.users contains the email).
// Id is the Supabase auth.users.id, automatically set by a Supabase Auth Hook.
model User {
  id           String   @id @default(cuid())
  name         String
  createdDeals Deal[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenantId     String
  authId       String   @unique
}

// ===================== //
// ===================== //
// CRM TABLES 
// ===================== //
// ===================== //
//
// Company, Contact, Deal...
//

model Club {
  id        String    @id @default(cuid())
  name      String
  address   String?
  contacts  Contact[]
  deals     Deal[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  country   Country?  @relation(fields: [countryId], references: [id])
  countryId String?
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model Contact {
  id        String   @id @default(cuid())
  type      String
  name      String
  email     String?
  phone     String?
  address   String?
  country   String?
  deals     Deal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club     @relation(fields: [clubId], references: [id])
  clubId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String

  @@unique([email, tenantId])
}

model Deal {
  id              String    @id @default(cuid())
  status          String
  name            String
  description     String?
  value           Float
  currency        Currency? @default(EUR)
  createdBy       User      @relation(fields: [createdByUserId], references: [id])
  createdByUserId String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  club            Club      @relation(fields: [clubId], references: [id])
  clubId          String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        String
  Contact         Contact?  @relation(fields: [contactId], references: [id])
  contactId       String?
}

enum Currency {
  EUR
}

// ===================== //
// ===================== //
// MARKET (READ ONLY)
// ===================== //
// ===================== //
//
// A Club belongs to a League.
// A League belongs to a Country.
// A Country has many TransfertPeriods.
// See: https://www.transfermarkt.fr/transfer-statistik/transferfenster/statistik/stat/plus/0

model League {
  id        String    @id @default(cuid())
  countries Country[]
}

model Country {
  id               String            @id
  clubs            Club[]
  transfertPeriods TransfertPeriod[]
  league           League            @relation(fields: [leagueId], references: [id])
  leagueId         String
}

model TransfertPeriod {
  id        String   @id @default(cuid())
  from      DateTime
  to        DateTime
  country   Country  @relation(fields: [countryId], references: [id])
  countryId String
}
